'''
Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import time

from functools import reduce
from math import sqrt


def positive_int_generator():
    a = 1
    while True:
        yield a
        a += 1

def get_factors(num):
    step = 2 if num%2 else 1
    return set(reduce(list.__add__,
        ([i, num//i] for i in range(1, int(sqrt(num))+1, step) if num % i == 0)))

def first_n(num):
    posint_gen = positive_int_generator()

    to_eval = 0
    while True:
        to_eval += next(posint_gen)
        if len(get_factors(to_eval)) > num:
            return to_eval


if __name__ == '__main__':
    start_time = time.time()
    print(first_n(500))  # 76576500
    print("--- %s seconds ---" % (time.time() - start_time))
